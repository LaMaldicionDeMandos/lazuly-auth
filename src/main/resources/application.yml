spring:
  application:
    name: lazuly-auth
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5Dialect
  datasource:
    testOnBorrow: true
    validationQuery: SELECT 1
  cloud:
    stream:
      default-binder: kafka
      bindings:
        new_user_input:
          destination: newUser
          content-type: application/json
          group: lazuly-auth
        delete_user_input:
          destination: deleteUser
          content-type: application/json
          group: lazuly-auth
        change_roles_input:
          destination: changeRoles
          content-type: application/json
          group: lazuly-auth
        new_owner_output:
          destination: newOwner #Nombre de la cola o topic
          content-type: application/json
      kafka:
        binder:
          zkNodes: localhost
          brokers: localhost
app:
  security:
    clientkey: ${CLIENT_KEY}
    expiration: 86400
    refreshExpiration: 2592000
  host: ${HOST}
  emails:
    support: pasutmarcelo@gmail.com, anbenito@yahoo.com.ar
  mailjet:
    welcome: 280786
    new: 275414
    welcome-user: 275057

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: ${HOST}:8761/eureka/
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 30000
#Setting the logging levels for the service
logging:
  level:
    com.netflix: WARN
    org.springframework.web: WARN
    com.thoughtmechanix: DEBUG

---
spring:
  profiles: developer
  datasource:
    url: jdbc:mysql://localhost/lazuly-users
    username: root
  cloud:
    stream:
      kafka:
        binder:
          zkNodes: localhost
          brokers: localhost
app:
  signing:
    key: aidafrancoygeorgelosamo
  secret: aidafrancoygeorgelosamo
server:
  port: 9998

---
spring:
  profiles: staging
  datasource:
    url: ${DB_URI}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  cloud:
    stream:
      kafka:
        binder:
          zkNodes: ${KAFKA_HOST}
          brokers: ${KAFKA_HOST}
app:
  signing:
    key: ${JWT_SECRET}
  secret: ${INTERNAL_SECRET}
server:
  port: ${PORT}